/* SPDX-License-Identifier: BSD-3-Clause */
/*
 * Library for unified formated output of normalized items: default configuration (json + user)
 *
 * Copyright (C) 2025 CESNET
 * Author(s):
 *   Martin Spinler <spinler@cesnet.cz>
 */

#ifndef __NETCOPE_NI_DEFAULT__
#define __NETCOPE_NI_DEFAULT__


/*
 * Default configuration for NI library with USER and JSON output plugins.
 *
 * This file prepares ready-to-use structures (struct ni_context_item_default,
 * struct ni_common_item_callbacks) and access functions. Also prepares basic
 * set of ni_item_* functions generated by macro NI_DEFAULT_ITEMS().
 *
 * Usage:
 * 1) create enum value for all output items,
 * 2) create ni_context_item_default array and fill
 *    both JSON and USER members (see plugin file for details),
 * 3) generate ni_item output functions through NI_DEFAULT_ITEMS() macro:
 *    a) for usage with custom callbacks use `NI_DEFAULT_ITEMS(cbs_struct_type, ci_accessor.)`
 *       where cbs_struc_type is custom structure type with callbacks and ci_accessor
 *       is the name of cbs_struct_type member which has assigned ni_common_item_callbacks value,
 *    b) otherwise use `NI_DEFAULT_ITEMS(ni_common_item_callbacks, )`
 * 4) use `ni_init_root_context_default`, pass a value from enum ni_context_defaults,
 *    items in ni_context_defaults and
 *    a) selected-plugin-specific callback struct pointer for usage with custom callbacks
 *    b) for no custom callbacks use &ni_common_item_callbacks[selected_ni_context_default_plugin].
 * 5) use structural functions (ni_section/ni_endsection, ni_list/ni_endlist) or ni_item_* value-print functions
 *    to produce output.
 */

enum ni_context_defaults {
	NI_DRC_USER = 0,
	NI_DRC_JSON,
};

struct ni_context_item_default {
	struct ni_json_item json;
	struct ni_user_item user;
};

static inline void* ni_get_item_default_json(void *items, int item_index)
{
	struct ni_context_item_default * ni_items = items;
	if (items == NULL)
		return NULL;
	return &ni_items[item_index].json;
}

static inline void* ni_get_item_default_user(void *items, int item_index)
{
	struct ni_context_item_default * ni_items = items;
	if (items == NULL)
		return NULL;

	return &ni_items[item_index].user;
}

static const struct ni_callbacks ni_cb_json = {
	.init = ni_json_init,
	.close = ni_json_close,
	.section = ni_json_section,
	.endsection = ni_json_endsection,
	.list = ni_json_list,
	.endlist = ni_json_endlist,
	.prelude = ni_json_prelude,
	.postlude = ni_json_postlude,
};

static const struct ni_callbacks ni_cb_user = {
	.init = ni_user_init,
	.section = ni_user_section,
	.endsection = ni_user_endsection,
	.list = ni_user_list,
	.endlist = ni_user_endlist,
	.prelude = ni_user_prelude,
	.postlude = ni_user_postlude,
};

/* Common print functions */
static int ni_def_print_str_user(void *priv, int item, const char *val)
{
	struct ni_user_cbp *p = priv;
	(void) item;
	return fprintf(p->f, "%*s", p->align, val);
}

static int ni_def_print_str_json(void *priv, int item, const char *val)
{
	struct ni_json_cbp *p = priv;
	(void) item;
	/* TODO: escape quotes */
	return fprintf(p->f, "\"%s\"", val);
}

static int ni_def_print_xreg_user(void *priv, int item, uint64_t val)
{
	struct ni_user_cbp *p = priv;
	int ret = 0;
	(void) item;

	ret += fprintf(p->f, "0x%0*" PRIX64, p->width, val);

	if (p->align > ret)
		ret += fprintf(p->f, "%*s", p->align - ret, "");
	return ret;
}

static int ni_def_print_xreg_json(void *priv, int item, uint64_t val)
{
	struct ni_json_cbp *p = priv;
	(void) item;
	return fprintf(p->f, "%lu", val);
}

static int ni_def_print_double_user(void *priv, int item, double val)
{
	struct ni_user_cbp *p = priv;
	(void) item;
	return fprintf(p->f, "%*.*f", p->align, p->decim, val);
}

static int ni_def_print_double_json(void *priv, int item, double val)
{
	struct ni_json_cbp *p = priv;
	(void) item;
	return fprintf(p->f, "%.*f", p->decim, val);
}

static int ni_def_print_int_user(void *priv, int item, int val)
{
	struct ni_user_cbp *p = priv;
	(void) item;
	return fprintf(p->f, "%*d", p->width, val);
}

static int ni_def_print_int_json(void *priv, int item, int val)
{
	struct ni_json_cbp *p = priv;
	(void) item;
	return fprintf(p->f, "%d", val);
}

static int ni_def_print_uint64_t_user(void *priv, int item, uint64_t val)
{
	struct ni_user_cbp *p = priv;
	(void) item;
	return fprintf(p->f, "%*"PRIu64, p->width, val);
}

static int ni_def_print_uint64_t_json(void *priv, int item, uint64_t val)
{
	struct ni_json_cbp *p = priv;
	(void) item;
	return fprintf(p->f, "%"PRIu64, val);
}

struct ni_common_item_callbacks {
	int (*print_str)(void *priv, int item, const char *);
	int (*print_xreg)(void *priv, int item, uint64_t);
	int (*print_double)(void *priv, int item, double);
	int (*print_int)(void *priv, int item, int);
	int (*print_uint64_t)(void *priv, int item, uint64_t);
};


#define NI_CIC_USER \
	[NI_DRC_USER] = {\
		.print_str = ni_def_print_str_user,\
		.print_xreg = ni_def_print_xreg_user,\
		.print_double = ni_def_print_double_user,\
		.print_int = ni_def_print_int_user,\
		.print_uint64_t = ni_def_print_uint64_t_user,\
	}

#define NI_CIC_JSON \
	[NI_DRC_JSON] = {\
		.print_str = ni_def_print_str_json,\
		.print_xreg = ni_def_print_xreg_json,\
		.print_double = ni_def_print_double_json,\
		.print_int = ni_def_print_int_json,\
		.print_uint64_t = ni_def_print_uint64_t_json,\
	}

static const struct ni_common_item_callbacks ni_common_item_callbacks[] = {
	NI_CIC_USER,
	NI_CIC_JSON,
};

static inline struct ni_context *ni_init_root_context_default(int ni_drc, struct ni_context_item_default *items, const void *custom_item_cbs)
{
	static struct ni_callbacks cb_user = ni_cb_user;
	static struct ni_callbacks cb_json = ni_cb_json;

	const struct ni_callbacks *cb = NULL;
	struct ni_common_init_params cip;

	cip.items = items;
	if (ni_drc == NI_DRC_JSON) {
		cb = &cb_json;
		cip.get = ni_get_item_default_json;
	} else if (ni_drc == NI_DRC_USER) {
		cb = &cb_user;
		cip.get = ni_get_item_default_user;
	} else {
		return NULL;
	}

	return ni_init_root_context(cb, NULL, &cip, custom_item_cbs);
}

#define _NI_FDT_PROPS(name, ni_name, type, LEN_COND)\
static inline int ni_fdt_prop_##name(struct ni_context *ctx, int item, const void *fdt, int fdt_offset, const char* prop_name, int *len)\
{\
	int ilen;\
	type prop;\
\
	prop = fdt_getprop(fdt, fdt_offset, prop_name, &ilen);\
	if (ilen LEN_COND)\
		ni_item_##ni_name(ctx, item, prop);\
	if (len)\
		*len = ilen;\
	return ilen;\
}

#define _NI_FDT_PROPD(name, ni_name, type, LEN_COND, conv)\
static inline int ni_fdt_prop_##name(struct ni_context *ctx, int item, const void *fdt, int fdt_offset, const char* prop_name)\
{\
	int ilen;\
	type *prop;\
\
	prop = fdt_getprop(fdt, fdt_offset, prop_name, &ilen);\
	if (ilen LEN_COND)\
		ni_item_##ni_name(ctx, item, conv(*prop));\
	return ilen;\
}

#define NI_DEFAULT_ITEMS(cbtype, accessor) \
	NI_ITEM_CB(double, double, cbtype, accessor print_double)\
	NI_ITEM_CB(int, int, cbtype, accessor print_int)\
	NI_ITEM_CB(uint64_t, uint64_t, cbtype, accessor print_uint64_t)\
	NI_ITEM_CB(str, const char*, cbtype, accessor print_str)\
	NI_ITEM_CB(uint64_tx, uint64_t, cbtype, accessor print_xreg)\
	_NI_FDT_PROPS(str, str, const char*, >= 0)\
	_NI_FDT_PROPD(32, int, const uint32_t, == sizeof(uint32_t), fdt32_to_cpu)\
	_NI_FDT_PROPD(uint64_tx, uint64_tx, const uint64_t, == sizeof(uint64_t), fdt64_to_cpu)\

#endif // __NETCOPE_NI_DEFAULT__
