import fdt
from typing import Optional

from . import libnfb


class RxMac:
    def __init__(self, nfb: libnfb.Nfb, node: fdt.Node) -> None: ...
    @property
    def link(self) -> bool: ...
    @property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, enable: bool) -> None: ...
    def enable(self, enable: bool = True) -> None: ...
    def disable(self) -> None: ...
    def is_enabled(self) -> bool: ...
    def is_link(self) -> bool: ...
    def reset_stats(self) -> None: ...
    def read_stats(self, etherstats: bool = False) -> dict[str, int]: ...

class TxMac:
    def __init__(self, nfb: libnfb.Nfb, node: fdt.Node) -> None: ...
    @property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, enable: bool) -> None: ...
    def enable(self, enable: bool = True) -> None: ...
    def disable(self) -> None: ...
    def is_enabled(self) -> bool: ...
    def reset_stats(self) -> None: ...
    def read_stats(self, etherstats: bool = False) -> dict[str, int]: ...

class Transceiver:
    def __init__(self, nfb: libnfb.Nfb , node: fdt.Node) -> None: ...
    def is_present(self) -> bool: ...
    @property
    def vendor_name(self) -> str: ...
    @property
    def vendor_pn(self) -> str: ...
    @property
    def vendor_sn(self) -> str: ...
    def read_vendor_name(self) -> str: ...
    def read_vendor_pn(self) -> str: ...
    def read_vendor_sn(self) -> str: ...

class Mdio:
    def __init__(self, nfb: libnfb.Nfb, node: fdt.Node, param_node: Optional[fdt.Node] = None) -> None: ...
    def read(self, devad: int, reg: int, prtad: int = 0) -> int: ...
    def write(self, devad: int, reg: int, val: int, prtad: int = 0) -> None: ...
